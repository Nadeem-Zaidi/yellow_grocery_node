// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttributeDataType {
  ALN     @map("ALN")
  NUMERIC @map("NUMERIC")
}

model brand {
  id           String @id @default(uuid())
  name         String
  description  String
  abbreviation String
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  images  String[]
  left    Int?
  right   Int?
  tree_id String?
}

model Categories {
  id               String             @id @default(uuid())
  name             String             @unique
  description      String?
  images           String[]
  tags             String[]
  parent_id        String? // Assuming every category has a parent
  parent           Categories?        @relation("parent_category", fields: [parent_id], references: [id])
  children         Categories[]       @relation("parent_category") // Renamed from Categories to avoid conflict
  CategorySpec     CategorySpec[]     @relation("categories_categoryspec")
  path             String?            @unique
  productvariation productvariation[]
  ProductSpecs     ProductSpecs[]
  Product          Product[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  LandingPage      LandingPage?       @relation(fields: [landingPageId], references: [id])
  landingPageId    String?
}

model MeasureUnit {
  id               String             @id @default(uuid())
  unit             String             @unique
  abbreviation     String
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CategorySpec     CategorySpec[]
  productvariation productvariation[]
  ProductSpecs     ProductSpecs[]
  inventory        inventory[]
}

model Attribute {
  id            String            @id @default(uuid())
  attributename String            @unique
  description   String?
  datatype      AttributeDataType
  CategorySpec  CategorySpec[]    @relation("attribute_categoryspec")
  ProductSpecs  ProductSpecs[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model CategorySpec {
  id            String       @id @default(uuid())
  categoryid    String
  categories    Categories   @relation("categories_categoryspec", fields: [categoryid], references: [id])
  attributename String
  attribute     Attribute    @relation("attribute_categoryspec", fields: [attributename], references: [attributename])
  MeasureUnit   MeasureUnit? @relation(fields: [measureunit], references: [unit])
  measureunit   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Product {
  id               String             @id @default(uuid()) // UUID for unique identifier
  name             String
  description      String
  category         String
  Category         Categories         @relation(fields: [categoryId], references: [id])
  brand            String
  measuringunit    String?
  tags             String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  description_list String[]
  OrderItem        OrderItem[]
  Cart             Cart[]
  productvariation productvariation[]
  categoryId       String
}

model productvariation {
  id                     String         @unique @default(uuid())
  name                   String
  description            String
  category               Categories?    @relation(fields: [categoryid], references: [id])
  product                Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId              String
  images                 String[]
  tags                   String[]
  sku                    String
  manufacturingDate      DateTime?
  expirationDate         DateTime?
  complianceCertificates String?
  ShippingClass          String?
  deliveryTimeMin        Decimal?       @db.Decimal(10, 2) // Minimum delivery time in hours or days
  deliveryTimeMax        Decimal?       @db.Decimal(10, 2) // Maximum delivery time in hours or days
  deliveryTime           MeasureUnit?   @relation(fields: [deliverytimeunit], references: [id]) // Unit of time: 'hours' or 'days'
  ProductSpecs           ProductSpecs[]
  categoryid             String?
  deliverytimeunit       String?
  isFeatured             Boolean        @default(true)
  inventory              inventory[]
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  pricing                pricing[]
}

model ProductSpecs {
  id                 String           @unique @default(uuid())
  productvariation   productvariation @relation(fields: [productVariationId], references: [id], onDelete: Cascade)
  category           Categories       @relation(fields: [categoryId], references: [id])
  categoryId         String
  attribute          Attribute        @relation(fields: [attributename], references: [attributename])
  attributename      String
  measureunit        MeasureUnit      @relation(fields: [unit], references: [unit])
  alnvalue           String?
  numvalue           Decimal?
  productVariationId String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  unit               String
}

model inventory {
  id                 String           @unique @default(uuid())
  variationId        productvariation @relation(fields: [productVariationId], references: [id])
  productVariationId String
  unit               MeasureUnit      @relation(fields: [measureUnitId], references: [id])
  reststockdate      DateTime?
  quantity           Int
  stocksize          Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  measureUnitId      String
}

model pricing {
  id                 String           @unique @default(uuid())
  mrp                Decimal?         @db.Decimal(10, 2)
  sellingprice       Decimal?         @db.Decimal(10, 2)
  discount           Decimal?         @db.Decimal(10, 2)
  finalprice         Decimal?         @db.Decimal(10, 2)
  variation          productvariation @relation(fields: [productVariationId], references: [id])
  productVariationId String
}

model User {
  id           String    @id @default(uuid()) // UUID for unique identifier
  email        String    @unique
  password     String // Consider storing hashed passwords
  firstName    String
  lastName     String
  address      String[] // JSON field to store address details, or create a related model
  phoneNumber  String?   @unique // Optional
  dateOfBirth  DateTime?
  profileImage String? // URL to the profile image, optional
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLogin    DateTime?

  // Roles or Permissions (if applicable)
  role String? // Could be an enum of roles like ADMIN, USER, etc.

  // Relations
  orders Order[] // If you have an Order model for user orders

  // Additional fields based on your application requirements
  Cart Cart[]
}

model Cart {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  product   Product[]
  quantity  Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id              String    @id @default(uuid()) // UUID for unique identifier
  userId          String // Foreign key for the User model
  user            User      @relation(fields: [userId], references: [id])
  totalPrice      Float // Total price of the order in the smallest unit of currency
  status          String // Order status (e.g., 'pending', 'shipped', 'delivered', etc.)
  orderDate       DateTime  @default(now())
  deliveryDate    DateTime?
  paymentMethod   String // Payment method (e.g., 'credit_card', 'paypal', etc.)
  shippingAddress Json // JSON field for shipping address, or link to an Address model

  // Product-Order Relationship (many-to-many)
  items OrderItem[]

  // Additional fields based on your application requirements
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int // Price per item at the time of order

  // Additional fields like size, color, etc., if needed
}

model LandingPage {
  id         String       @id @default(uuid())
  categories Categories[]
}
